{"ast":null,"code":"var _jsxFileName = \"/Users/akshaykumar/Desktop/projects/React/netflixgpt/src/components/VideoBackground.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { url_header } from \"../utils/url_header\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addNowPlayingMovie } from \"../utils/movieSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoBackground = () => {\n  _s();\n  const dispatch = useDispatch();\n  console.log(key);\n  const movies = async () => {\n    var _video$;\n    const data = await fetch('https://api.themoviedb.org/3/movie/1096197/videos?language=en-US', url_header);\n    const json = await data.json();\n    const res = !json ? null : json.results;\n    const video = res.filter(item => item.type === \"Trailer\");\n    const key = (_video$ = video[0]) === null || _video$ === void 0 ? void 0 : _video$.key;\n    dispatch(addNowPlayingMovie(key));\n    //console.log(video[0]?.key);\n    //dispatch(addNowPlayingMovie(res))\n  };\n  useEffect(() => {\n    movies();\n  }, []);\n  const key = useSelector(store => store.movies.key);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n      width: \"560\",\n      height: \"315\",\n      src: \"https://www.youtube.com/embed/\" + key,\n      title: \"YouTube video player\",\n      frameborder: \"0\",\n      allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\",\n      allowfullscreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(VideoBackground, \"QQVSIIPwzmEYVaJusj32DF0jRcA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = VideoBackground;\nexport default VideoBackground;\nvar _c;\n$RefreshReg$(_c, \"VideoBackground\");","map":{"version":3,"names":["useEffect","url_header","useDispatch","useSelector","addNowPlayingMovie","jsxDEV","_jsxDEV","VideoBackground","_s","dispatch","console","log","key","movies","_video$","data","fetch","json","res","results","video","filter","item","type","store","children","width","height","src","title","frameborder","allow","allowfullscreen","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/akshaykumar/Desktop/projects/React/netflixgpt/src/components/VideoBackground.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { url_header } from \"../utils/url_header\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addNowPlayingMovie } from \"../utils/movieSlice\";\n\nconst VideoBackground = () =>{\n    const dispatch = useDispatch();\n    \n    console.log(key)\n    const movies = async () =>{\n        const data = await fetch('https://api.themoviedb.org/3/movie/1096197/videos?language=en-US', url_header)\n        \n        const json = await data.json();\n        const res = (!json) ? null : json.results;\n        const video = res.filter(item => item.type === \"Trailer\");\n        const key = video[0]?.key;\n        dispatch(addNowPlayingMovie(key));\n        //console.log(video[0]?.key);\n        //dispatch(addNowPlayingMovie(res))\n    }\n    useEffect(()=>{movies()},[]);\n    const key = useSelector(store=>store.movies.key)\n    return(\n        <div>\n            <iframe width=\"560\" height=\"315\" src={\"https://www.youtube.com/embed/\"+key} title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n            </div>\n    )\n}\nexport default VideoBackground;"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,kBAAkB,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,eAAe,GAAGA,CAAA,KAAK;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9BQ,OAAO,CAACC,GAAG,CAACC,GAAG,CAAC;EAChB,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAW;IAAA,IAAAC,OAAA;IACtB,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,kEAAkE,EAAEf,UAAU,CAAC;IAExG,MAAMgB,IAAI,GAAG,MAAMF,IAAI,CAACE,IAAI,CAAC,CAAC;IAC9B,MAAMC,GAAG,GAAI,CAACD,IAAI,GAAI,IAAI,GAAGA,IAAI,CAACE,OAAO;IACzC,MAAMC,KAAK,GAAGF,GAAG,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAK,SAAS,CAAC;IACzD,MAAMX,GAAG,IAAAE,OAAA,GAAGM,KAAK,CAAC,CAAC,CAAC,cAAAN,OAAA,uBAARA,OAAA,CAAUF,GAAG;IACzBH,QAAQ,CAACL,kBAAkB,CAACQ,GAAG,CAAC,CAAC;IACjC;IACA;EACJ,CAAC;EACDZ,SAAS,CAAC,MAAI;IAACa,MAAM,CAAC,CAAC;EAAA,CAAC,EAAC,EAAE,CAAC;EAC5B,MAAMD,GAAG,GAAGT,WAAW,CAACqB,KAAK,IAAEA,KAAK,CAACX,MAAM,CAACD,GAAG,CAAC;EAChD,oBACIN,OAAA;IAAAmB,QAAA,eACInB,OAAA;MAAQoB,KAAK,EAAC,KAAK;MAACC,MAAM,EAAC,KAAK;MAACC,GAAG,EAAE,gCAAgC,GAAChB,GAAI;MAACiB,KAAK,EAAC,sBAAsB;MAACC,WAAW,EAAC,GAAG;MAACC,KAAK,EAAC,qGAAqG;MAACC,eAAe;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzP,CAAC;AAElB,CAAC;AAAA5B,EAAA,CAtBKD,eAAe;EAAA,QACAL,WAAW,EAehBC,WAAW;AAAA;AAAAkC,EAAA,GAhBrB9B,eAAe;AAuBrB,eAAeA,eAAe;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}